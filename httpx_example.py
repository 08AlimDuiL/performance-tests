import httpx

#Метод httpx.get() позволяет отправлять GET-запросы к API и получать ответ
response_0 = httpx.get("https://jsonplaceholder.typicode.com/todos/1")

print(response_0.status_code)  # 200
print(response_0.text)
print(response_0.json())       # {'userId': 1, 'id': 1, 'title': 'delectus aut autem', 'completed': False}
print("0---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#Метод httpx.post() используется для передачи данных на сервер.
data = {
    "title": "Новая задача",
    "completed": False,
    "userId": 1
}

response_1 = httpx.post("https://jsonplaceholder.typicode.com/todos", json=data)

print(response_1.status_code)  # 201 (Created)
print(response_1.json())       # Ответ с созданной записью
print("1---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#Некоторые API требуют данные в формате form-urlencoded вместо JSON.
data = {"username": "test_user", "password": "123456"}

response_2 = httpx.post("https://httpbin.org/post", data=data)

print(response_2.json())  # {'form': {'username': 'test_user', 'password': '123456'}, ...}
print("2---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#Для работы с API часто нужно передавать заголовки, например Authorization.
headers = {"Authorization": "Bearer my_secret_token"}

response_3 = httpx.get("https://httpbin.org/get", headers=headers)

print(response_3.json())  # Заголовки включены в ответ
print("3---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#Метод params добавляет параметры к URL, аналогично ?key=value.
params = {"userId": 1}

response_4 = httpx.get("https://jsonplaceholder.typicode.com/todos", params=params)

print(response_4.url)    # https://jsonplaceholder.typicode.com/todos?userId=1
print(response_4.request.url.query)
print(response_4.json()) # Фильтрованный список задач
print("4---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#Если API требует загрузки файлов, можно передать их в files.
#files = {"file": ("example.txt", open("example.txt", "rb"))}
# Указать корректный путь к файлу
#response_5 = httpx.post("https://httpbin.org/post", files=files)

#print(response_5.json())  # Ответ с данными о загруженном файле
#print("5---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#При множественных запросах к API лучше использовать httpx.Client(), который повторно использует соединения, уменьшая накладные расходы.
with httpx.Client() as client:
    response_6_1 = client.get("https://jsonplaceholder.typicode.com/todos/1")
    response_6_2 = client.get("https://jsonplaceholder.typicode.com/todos/2")

print(response_6_1.json())  # Данные первой задачи
print(response_6_2.json())  # Данные второй задачи
print("6---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#Чтобы передавать заголовки во всех запросах, можно задать их при создании Client.
client = httpx.Client(headers={"Authorization": "Bearer my_secret_token"})

response_7 = client.get("https://httpbin.org/get")

print(response_7.json())  # Заголовки включены в ответ
print("7---------------------------------------------------------------------------------------------------------------")
client.close()
#Здесь клиент автоматически добавляет Authorization ко всем запросам.

#-----------------------------------------------------------------------------------------------------------------------
#Если API возвращает ошибку (4xx или 5xx), можно вызвать raise_for_status(), чтобы вызвать исключение.
try:
    response_8 = httpx.get("https://jsonplaceholder.typicode.com/invalid-url")
    response_8.raise_for_status()  # Вызовет исключение при 4xx/5xx
except httpx.HTTPStatusError as e:
    print(f"Ошибка запроса: {e}")
print("8---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------

#Чтобы избежать зависаний, всегда указывайте timeout.

try:
    response_9 = httpx.get("https://httpbin.org/delay/5", timeout=2)
except httpx.ReadTimeout:
    print("Запрос превысил лимит времени")
print("9---------------------------------------------------------------------------------------------------------------")
#-----------------------------------------------------------------------------------------------------------------------


